/* tslint:disable */
/* eslint-disable */
/**
 * OS2Display Service API
 * API description
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * Checks whether the collection is empty (contains no elements).
     * @type {boolean}
     * @memberof Collection
     */
    'empty'?: boolean;
    /**
     * Gets all keys/indices of the collection.
     * @type {Array<number>}
     * @memberof Collection
     */
    'keys'?: Array<number>;
    /**
     * Gets all values of the collection.
     * @type {Array<string>}
     * @memberof Collection
     */
    'values'?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof Collection
     */
    'iterator'?: any;
}
/**
 * 
 * @export
 * @interface CollectionJsonld
 */
export interface CollectionJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof CollectionJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof CollectionJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionJsonld
     */
    '@type'?: string;
    /**
     * Checks whether the collection is empty (contains no elements).
     * @type {boolean}
     * @memberof CollectionJsonld
     */
    'empty'?: boolean;
    /**
     * Gets all keys/indices of the collection.
     * @type {Array<number>}
     * @memberof CollectionJsonld
     */
    'keys'?: Array<number>;
    /**
     * Gets all values of the collection.
     * @type {Array<string>}
     * @memberof CollectionJsonld
     */
    'values'?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof CollectionJsonld
     */
    'iterator'?: any;
}
/**
 * 
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface FeedFeed
 */
export interface FeedFeed {
    /**
     * 
     * @type {string}
     * @memberof FeedFeed
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedFeed
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedFeed
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedFeed
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedFeed
     */
    'configuration'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FeedFeed
     */
    'slide'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FeedFeed
     */
    'feedSource'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FeedFeed
     */
    'feedUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface FeedFeedJsonld
 */
export interface FeedFeedJsonld {
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof FeedFeedJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedFeedJsonld
     */
    'configuration'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    'slide'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    'feedSource'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FeedFeedJsonld
     */
    'feedUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface FeedSourceFeedSource
 */
export interface FeedSourceFeedSource {
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'outputType'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'feedType'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedSourceFeedSource
     */
    'secrets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedSourceFeedSource
     */
    'feeds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedSourceFeedSource
     */
    'admin'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSource
     */
    'supportedFeedOutputType'?: string;
}
/**
 * 
 * @export
 * @interface FeedSourceFeedSourceJsonld
 */
export interface FeedSourceFeedSourceJsonld {
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof FeedSourceFeedSourceJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'outputType'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'feedType'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'secrets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'feeds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'admin'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FeedSourceFeedSourceJsonld
     */
    'supportedFeedOutputType'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * Slide ULID
     * @type {string}
     * @memberof InlineObject
     */
    'slide'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * Screen group ULID
     * @type {string}
     * @memberof InlineObject1
     */
    'screenGroup'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * Screen ULID
     * @type {string}
     * @memberof InlineObject2
     */
    'screen'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * Playlist ULID
     * @type {string}
     * @memberof InlineObject3
     */
    'playlist'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * Playlist ULID
     * @type {string}
     * @memberof InlineObject4
     */
    'playlist'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<ScreenGroupScreenGroupJsonld>}
     * @memberof InlineResponse200
     */
    'hydra:member': Array<ScreenGroupScreenGroupJsonld>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse200
     */
    'hydra:view'?: InlineResponse200HydraView;
    /**
     * 
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse200
     */
    'hydra:search'?: InlineResponse200HydraSearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<ScreenScreenJsonld>}
     * @memberof InlineResponse2001
     */
    'hydra:member': Array<ScreenScreenJsonld>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2001
     */
    'hydra:view'?: InlineResponse200HydraView;
    /**
     * 
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2001
     */
    'hydra:search'?: InlineResponse200HydraSearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<PlaylistScreenRegionPlaylistScreenRegionJsonld>}
     * @memberof InlineResponse2002
     */
    'hydra:member': Array<PlaylistScreenRegionPlaylistScreenRegionJsonld>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2002
     */
    'hydra:view'?: InlineResponse200HydraView;
    /**
     * 
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2002
     */
    'hydra:search'?: InlineResponse200HydraSearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<PlaylistSlidePlaylistSlideJsonld>}
     * @memberof InlineResponse2003
     */
    'hydra:member': Array<PlaylistSlidePlaylistSlideJsonld>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2003
     */
    'hydra:view'?: InlineResponse200HydraView;
    /**
     * 
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2003
     */
    'hydra:search'?: InlineResponse200HydraSearch;
}
/**
 * 
 * @export
 * @interface InlineResponse200HydraSearch
 */
export interface InlineResponse200HydraSearch {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    'hydra:template'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    'hydra:variableRepresentation'?: string;
    /**
     * 
     * @type {Array<InlineResponse200HydraSearchHydraMapping>}
     * @memberof InlineResponse200HydraSearch
     */
    'hydra:mapping'?: Array<InlineResponse200HydraSearchHydraMapping>;
}
/**
 * 
 * @export
 * @interface InlineResponse200HydraSearchHydraMapping
 */
export interface InlineResponse200HydraSearchHydraMapping {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    'variable'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    'property'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    'required'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse200HydraView
 */
export interface InlineResponse200HydraView {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:first'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:last'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:previous'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:next'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'slide'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'playlist'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse201
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011
     */
    'playlist'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011
     */
    'screen-group'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2012
 */
export interface InlineResponse2012 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2012
     */
    'playlist'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2012
     */
    'screen'?: string;
}
/**
 * 
 * @export
 * @interface MediaMedia
 */
export interface MediaMedia {
    /**
     * 
     * @type {string}
     * @memberof MediaMedia
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMedia
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMedia
     */
    'license'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMedia
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMedia
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMedia
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMedia
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Collection}
     * @memberof MediaMedia
     */
    'media'?: Collection;
    /**
     * 
     * @type {Array<string>}
     * @memberof MediaMedia
     */
    'assets'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MediaMediaJsonld
 */
export interface MediaMediaJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof MediaMediaJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    'license'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof MediaMediaJsonld
     */
    'media'?: CollectionJsonld;
    /**
     * 
     * @type {Array<string>}
     * @memberof MediaMediaJsonld
     */
    'assets'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OidcEndpoints
 */
export interface OidcEndpoints {
    /**
     * 
     * @type {string}
     * @memberof OidcEndpoints
     */
    'authorizationUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcEndpoints
     */
    'endSessionUrl'?: string;
}
/**
 * 
 * @export
 * @interface PlaylistPlaylist
 */
export interface PlaylistPlaylist {
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylist
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylist
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylist
     */
    'schedules'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylist
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylist
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylist
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylist
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylist
     */
    'slides'?: string;
    /**
     * 
     * @type {Collection}
     * @memberof PlaylistPlaylist
     */
    'campaignScreens'?: Collection;
    /**
     * 
     * @type {Collection}
     * @memberof PlaylistPlaylist
     */
    'campaignScreenGroups'?: Collection;
    /**
     * 
     * @type {Collection}
     * @memberof PlaylistPlaylist
     */
    'tenants'?: Collection;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistPlaylist
     */
    'isCampaign'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylist
     */
    'published'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PlaylistPlaylistInput
 */
export interface PlaylistPlaylistInput {
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistInput
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistInput
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistInput
     */
    'schedules'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistInput
     */
    'tenants'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistPlaylistInput
     */
    'isCampaign'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistInput
     */
    'published'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PlaylistPlaylistInputJsonld
 */
export interface PlaylistPlaylistInputJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof PlaylistPlaylistInputJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistInputJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistInputJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistInputJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistInputJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistInputJsonld
     */
    'schedules'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistInputJsonld
     */
    'tenants'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistPlaylistInputJsonld
     */
    'isCampaign'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistInputJsonld
     */
    'published'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PlaylistPlaylistJsonld
 */
export interface PlaylistPlaylistJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof PlaylistPlaylistJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistJsonld
     */
    'schedules'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistPlaylistJsonld
     */
    'slides'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof PlaylistPlaylistJsonld
     */
    'campaignScreens'?: CollectionJsonld;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof PlaylistPlaylistJsonld
     */
    'campaignScreenGroups'?: CollectionJsonld;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof PlaylistPlaylistJsonld
     */
    'tenants'?: CollectionJsonld;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistPlaylistJsonld
     */
    'isCampaign'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlaylistPlaylistJsonld
     */
    'published'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PlaylistScreenRegionPlaylistScreenRegion
 */
export interface PlaylistScreenRegionPlaylistScreenRegion {
    /**
     * 
     * @type {string}
     * @memberof PlaylistScreenRegionPlaylistScreenRegion
     */
    'playlist'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlaylistScreenRegionPlaylistScreenRegion
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface PlaylistScreenRegionPlaylistScreenRegionJsonld
 */
export interface PlaylistScreenRegionPlaylistScreenRegionJsonld {
    /**
     * 
     * @type {string}
     * @memberof PlaylistScreenRegionPlaylistScreenRegionJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistScreenRegionPlaylistScreenRegionJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof PlaylistScreenRegionPlaylistScreenRegionJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof PlaylistScreenRegionPlaylistScreenRegionJsonld
     */
    'playlist'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlaylistScreenRegionPlaylistScreenRegionJsonld
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface PlaylistSlidePlaylistSlide
 */
export interface PlaylistSlidePlaylistSlide {
    /**
     * 
     * @type {string}
     * @memberof PlaylistSlidePlaylistSlide
     */
    'slide'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlaylistSlidePlaylistSlide
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface PlaylistSlidePlaylistSlideJsonld
 */
export interface PlaylistSlidePlaylistSlideJsonld {
    /**
     * 
     * @type {string}
     * @memberof PlaylistSlidePlaylistSlideJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistSlidePlaylistSlideJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof PlaylistSlidePlaylistSlideJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof PlaylistSlidePlaylistSlideJsonld
     */
    'slide'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlaylistSlidePlaylistSlideJsonld
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface RefreshTokenResponse
 */
export interface RefreshTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface ScreenBindObject
 */
export interface ScreenBindObject {
    /**
     * 
     * @type {string}
     * @memberof ScreenBindObject
     */
    'bindKey'?: string;
}
/**
 * 
 * @export
 * @interface ScreenCampaignScreenCampaign
 */
export interface ScreenCampaignScreenCampaign {
    /**
     * 
     * @type {string}
     * @memberof ScreenCampaignScreenCampaign
     */
    'campaign'?: string;
}
/**
 * 
 * @export
 * @interface ScreenCampaignScreenCampaignJsonld
 */
export interface ScreenCampaignScreenCampaignJsonld {
    /**
     * 
     * @type {string}
     * @memberof ScreenCampaignScreenCampaignJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenCampaignScreenCampaignJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof ScreenCampaignScreenCampaignJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ScreenCampaignScreenCampaignJsonld
     */
    'campaign'?: string;
}
/**
 * 
 * @export
 * @interface ScreenGroupCampaignScreenGroupCampaign
 */
export interface ScreenGroupCampaignScreenGroupCampaign {
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupCampaignScreenGroupCampaign
     */
    'campaign'?: string;
}
/**
 * 
 * @export
 * @interface ScreenGroupCampaignScreenGroupCampaignJsonld
 */
export interface ScreenGroupCampaignScreenGroupCampaignJsonld {
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupCampaignScreenGroupCampaignJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupCampaignScreenGroupCampaignJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof ScreenGroupCampaignScreenGroupCampaignJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupCampaignScreenGroupCampaignJsonld
     */
    'campaign'?: string;
}
/**
 * 
 * @export
 * @interface ScreenGroupScreenGroup
 */
export interface ScreenGroupScreenGroup {
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'campaigns'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroup
     */
    'screens'?: string;
}
/**
 * 
 * @export
 * @interface ScreenGroupScreenGroupInput
 */
export interface ScreenGroupScreenGroupInput {
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupInput
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupInput
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ScreenGroupScreenGroupInputJsonld
 */
export interface ScreenGroupScreenGroupInputJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof ScreenGroupScreenGroupInputJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupInputJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupInputJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupInputJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupInputJsonld
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ScreenGroupScreenGroupJsonld
 */
export interface ScreenGroupScreenGroupJsonld {
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'campaigns'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenGroupScreenGroupJsonld
     */
    'screens'?: string;
}
/**
 * 
 * @export
 * @interface ScreenLayoutRegionsScreenLayoutRegionsJsonldRead
 */
export interface ScreenLayoutRegionsScreenLayoutRegionsJsonldRead {
    /**
     * 
     * @type {string}
     * @memberof ScreenLayoutRegionsScreenLayoutRegionsJsonldRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenLayoutRegionsScreenLayoutRegionsJsonldRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof ScreenLayoutRegionsScreenLayoutRegionsJsonldRead
     */
    '@context'?: string | any;
}
/**
 * 
 * @export
 * @interface ScreenLayoutScreenLayout
 */
export interface ScreenLayoutScreenLayout {
    /**
     * 
     * @type {string}
     * @memberof ScreenLayoutScreenLayout
     */
    'title'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenLayoutScreenLayout
     */
    'grid'?: Array<string>;
    /**
     * 
     * @type {Collection}
     * @memberof ScreenLayoutScreenLayout
     */
    'regions'?: Collection;
}
/**
 * 
 * @export
 * @interface ScreenLayoutScreenLayoutJsonld
 */
export interface ScreenLayoutScreenLayoutJsonld {
    /**
     * 
     * @type {string}
     * @memberof ScreenLayoutScreenLayoutJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenLayoutScreenLayoutJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof ScreenLayoutScreenLayoutJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ScreenLayoutScreenLayoutJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenLayoutScreenLayoutJsonld
     */
    'grid'?: Array<string>;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof ScreenLayoutScreenLayoutJsonld
     */
    'regions'?: CollectionJsonld;
}
/**
 * 
 * @export
 * @interface ScreenLoginOutput
 */
export interface ScreenLoginOutput {
    /**
     * 
     * @type {string}
     * @memberof ScreenLoginOutput
     */
    'bindKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenLoginOutput
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ScreenScreen
 */
export interface ScreenScreen {
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'campaigns'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'layout'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'location'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenScreen
     */
    'regions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'inScreenGroups'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenScreen
     */
    'dimensions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreen
     */
    'screenUser'?: string | null;
}
/**
 * 
 * @export
 * @interface ScreenScreenInput
 */
export interface ScreenScreenInput {
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInput
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInput
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInput
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInput
     */
    'layout'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInput
     */
    'location'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenScreenInput
     */
    'dimensions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ScreenScreenInputJsonld
 */
export interface ScreenScreenInputJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof ScreenScreenInputJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInputJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInputJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInputJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInputJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInputJsonld
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInputJsonld
     */
    'layout'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenInputJsonld
     */
    'location'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenScreenInputJsonld
     */
    'dimensions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ScreenScreenJsonld
 */
export interface ScreenScreenJsonld {
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof ScreenScreenJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'campaigns'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'layout'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'location'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenScreenJsonld
     */
    'regions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'inScreenGroups'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenScreenJsonld
     */
    'dimensions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ScreenScreenJsonld
     */
    'screenUser'?: string | null;
}
/**
 * 
 * @export
 * @interface SlideSlide
 */
export interface SlideSlide {
    /**
     * 
     * @type {string}
     * @memberof SlideSlide
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlide
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlide
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlide
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlide
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlide
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlide
     */
    'templateInfo'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SlideSlide
     */
    'theme'?: string;
    /**
     * 
     * @type {Collection}
     * @memberof SlideSlide
     */
    'onPlaylists'?: Collection;
    /**
     * 
     * @type {number}
     * @memberof SlideSlide
     */
    'duration'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlide
     */
    'published'?: Array<string>;
    /**
     * 
     * @type {Collection}
     * @memberof SlideSlide
     */
    'media'?: Collection;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlide
     */
    'content'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlide
     */
    'feed'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface SlideSlideInput
 */
export interface SlideSlideInput {
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInput
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInput
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInput
     */
    'templateInfo'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInput
     */
    'theme'?: string;
    /**
     * 
     * @type {number}
     * @memberof SlideSlideInput
     */
    'duration'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInput
     */
    'published'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInput
     */
    'feed'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInput
     */
    'media'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInput
     */
    'content'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SlideSlideInputJsonld
 */
export interface SlideSlideInputJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof SlideSlideInputJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInputJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInputJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInputJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInputJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInputJsonld
     */
    'templateInfo'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideInputJsonld
     */
    'theme'?: string;
    /**
     * 
     * @type {number}
     * @memberof SlideSlideInputJsonld
     */
    'duration'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInputJsonld
     */
    'published'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInputJsonld
     */
    'feed'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInputJsonld
     */
    'media'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideInputJsonld
     */
    'content'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SlideSlideJsonld
 */
export interface SlideSlideJsonld {
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof SlideSlideJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideJsonld
     */
    'templateInfo'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SlideSlideJsonld
     */
    'theme'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof SlideSlideJsonld
     */
    'onPlaylists'?: CollectionJsonld;
    /**
     * 
     * @type {number}
     * @memberof SlideSlideJsonld
     */
    'duration'?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideJsonld
     */
    'published'?: Array<string>;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof SlideSlideJsonld
     */
    'media'?: CollectionJsonld;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideJsonld
     */
    'content'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SlideSlideJsonld
     */
    'feed'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface TemplateTemplate
 */
export interface TemplateTemplate {
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplate
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemplateTemplate
     */
    'resources'?: Array<string>;
}
/**
 * 
 * @export
 * @interface TemplateTemplateJsonld
 */
export interface TemplateTemplateJsonld {
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof TemplateTemplateJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateTemplateJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemplateTemplateJsonld
     */
    'resources'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'tenantKey'?: string;
    /**
     * 
     * @type {Array<UserRoleTenant>}
     * @memberof Tenant
     */
    'userRoleTenants'?: Array<UserRoleTenant>;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'description'?: string;
    /**
     * Get the Ulid.
     * @type {string}
     * @memberof Tenant
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface TenantJsonld
 */
export interface TenantJsonld {
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string | any}
     * @memberof TenantJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    'tenantKey'?: string;
    /**
     * 
     * @type {Array<UserRoleTenantJsonld>}
     * @memberof TenantJsonld
     */
    'userRoleTenants'?: Array<UserRoleTenantJsonld>;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    'description'?: string;
    /**
     * Get the Ulid.
     * @type {string}
     * @memberof TenantJsonld
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantJsonld
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface ThemeTheme
 */
export interface ThemeTheme {
    /**
     * 
     * @type {string}
     * @memberof ThemeTheme
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeTheme
     */
    'description'?: string;
    /**
     * 
     * @type {Collection}
     * @memberof ThemeTheme
     */
    'onSlides'?: Collection;
    /**
     * 
     * @type {string}
     * @memberof ThemeTheme
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeTheme
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeTheme
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeTheme
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeTheme
     */
    'css'?: string;
}
/**
 * 
 * @export
 * @interface ThemeThemeInput
 */
export interface ThemeThemeInput {
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInput
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInput
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInput
     */
    'css'?: string;
}
/**
 * 
 * @export
 * @interface ThemeThemeInputJsonld
 */
export interface ThemeThemeInputJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof ThemeThemeInputJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInputJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInputJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInputJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInputJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeInputJsonld
     */
    'css'?: string;
}
/**
 * 
 * @export
 * @interface ThemeThemeJsonld
 */
export interface ThemeThemeJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof ThemeThemeJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof ThemeThemeJsonld
     */
    'onSlides'?: CollectionJsonld;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    'modifiedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThemeThemeJsonld
     */
    'css'?: string;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {Array<TokenTenants>}
     * @memberof Token
     */
    'tenants'?: Array<TokenTenants>;
    /**
     * 
     * @type {TokenUser}
     * @memberof Token
     */
    'user'?: TokenUser;
}
/**
 * 
 * @export
 * @interface TokenTenants
 */
export interface TokenTenants {
    /**
     * 
     * @type {string}
     * @memberof TokenTenants
     */
    'tenantKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenTenants
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenTenants
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TokenTenants
     */
    'roles'?: Array<string>;
}
/**
 * 
 * @export
 * @interface TokenUser
 */
export interface TokenUser {
    /**
     * 
     * @type {string}
     * @memberof TokenUser
     */
    'fullname'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenUser
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'fullName': string;
    /**
     * The hashed password
     * @type {string}
     * @memberof User
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'activeTenant'?: string;
    /**
     * 
     * @type {Array<UserRoleTenant>}
     * @memberof User
     */
    'userRoleTenants'?: Array<UserRoleTenant>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'provider'?: string;
    /**
     * A visual identifier that represents this user.
     * @type {string}
     * @memberof User
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {Collection}
     * @memberof User
     */
    'tenants'?: Collection;
    /**
     * Returning a salt is only needed, if you are not using a modern hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.
     * @type {string}
     * @memberof User
     */
    'salt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    'roleTenant'?: Array<string>;
    /**
     * 
     * @type {Array<UserRoleTenant>}
     * @memberof User
     */
    'userRoleTenant'?: Array<UserRoleTenant>;
    /**
     * Get the Ulid.
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface UserJsonld
 */
export interface UserJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof UserJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'fullName': string;
    /**
     * The hashed password
     * @type {string}
     * @memberof UserJsonld
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'activeTenant'?: string;
    /**
     * 
     * @type {Array<UserRoleTenantJsonld>}
     * @memberof UserJsonld
     */
    'userRoleTenants'?: Array<UserRoleTenantJsonld>;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'provider'?: string;
    /**
     * A visual identifier that represents this user.
     * @type {string}
     * @memberof UserJsonld
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'username'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserJsonld
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof UserJsonld
     */
    'tenants'?: CollectionJsonld;
    /**
     * Returning a salt is only needed, if you are not using a modern hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.
     * @type {string}
     * @memberof UserJsonld
     */
    'salt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserJsonld
     */
    'roleTenant'?: Array<string>;
    /**
     * 
     * @type {Array<UserRoleTenantJsonld>}
     * @memberof UserJsonld
     */
    'userRoleTenant'?: Array<UserRoleTenantJsonld>;
    /**
     * Get the Ulid.
     * @type {string}
     * @memberof UserJsonld
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserJsonld
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface UserRoleTenant
 */
export interface UserRoleTenant {
    /**
     * 
     * @type {User}
     * @memberof UserRoleTenant
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenant
     */
    'tenant'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRoleTenant
     */
    'roles'?: Array<string>;
    /**
     * Get the Ulid.
     * @type {string}
     * @memberof UserRoleTenant
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenant
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenant
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenant
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenant
     */
    'modifiedBy'?: string;
}
/**
 * 
 * @export
 * @interface UserRoleTenantJsonld
 */
export interface UserRoleTenantJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof UserRoleTenantJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {UserJsonld}
     * @memberof UserRoleTenantJsonld
     */
    'user'?: UserJsonld;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    'tenant'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRoleTenantJsonld
     */
    'roles'?: Array<string>;
    /**
     * Get the Ulid.
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleTenantJsonld
     */
    'modifiedBy'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get JWT token to login from OIDC token
         * @param {string} [state] OIDC state
         * @param {string} [idToken] OIDC id token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcAuthTokenItem: async (state?: string, idToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authentication/oidc/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (idToken !== undefined) {
                localVarQueryParameter['id_token'] = idToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get OpenID connect URLs
         * @param {string} [providerKey] The key for the provider to use. Leave out to use the default provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcAuthUrlsItem: async (providerKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authentication/oidc/urls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get JWT token to login from local user.
         * @param {Credentials} [credentials] Generate new JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCredentialsItem: async (credentials?: Credentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authentication/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentials, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get login info for a screen.
         * @param {object} [body] Get login info with JWT token for given nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginInfoScreen: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authentication/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get JWT token from refresh token.
         * @param {RefreshTokenRequest} [refreshTokenRequest] Refresh JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefreshTokenItem: async (refreshTokenRequest?: RefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authentication/token/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get JWT token to login from OIDC token
         * @param {string} [state] OIDC state
         * @param {string} [idToken] OIDC id token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOidcAuthTokenItem(state?: string, idToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOidcAuthTokenItem(state, idToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get OpenID connect URLs
         * @param {string} [providerKey] The key for the provider to use. Leave out to use the default provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOidcAuthUrlsItem(providerKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OidcEndpoints>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOidcAuthUrlsItem(providerKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get JWT token to login from local user.
         * @param {Credentials} [credentials] Generate new JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCredentialsItem(credentials?: Credentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCredentialsItem(credentials, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get login info for a screen.
         * @param {object} [body] Get login info with JWT token for given nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLoginInfoScreen(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenLoginOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLoginInfoScreen(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get JWT token from refresh token.
         * @param {RefreshTokenRequest} [refreshTokenRequest] Refresh JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRefreshTokenItem(refreshTokenRequest?: RefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRefreshTokenItem(refreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get JWT token to login from OIDC token
         * @param {string} [state] OIDC state
         * @param {string} [idToken] OIDC id token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcAuthTokenItem(state?: string, idToken?: string, options?: any): AxiosPromise<Token> {
            return localVarFp.getOidcAuthTokenItem(state, idToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get OpenID connect URLs
         * @param {string} [providerKey] The key for the provider to use. Leave out to use the default provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcAuthUrlsItem(providerKey?: string, options?: any): AxiosPromise<OidcEndpoints> {
            return localVarFp.getOidcAuthUrlsItem(providerKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get JWT token to login from local user.
         * @param {Credentials} [credentials] Generate new JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCredentialsItem(credentials?: Credentials, options?: any): AxiosPromise<Token> {
            return localVarFp.postCredentialsItem(credentials, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get login info for a screen.
         * @param {object} [body] Get login info with JWT token for given nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginInfoScreen(body?: object, options?: any): AxiosPromise<ScreenLoginOutput> {
            return localVarFp.postLoginInfoScreen(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get JWT token from refresh token.
         * @param {RefreshTokenRequest} [refreshTokenRequest] Refresh JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefreshTokenItem(refreshTokenRequest?: RefreshTokenRequest, options?: any): AxiosPromise<RefreshTokenResponse> {
            return localVarFp.postRefreshTokenItem(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Get JWT token to login from OIDC token
     * @param {string} [state] OIDC state
     * @param {string} [idToken] OIDC id token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getOidcAuthTokenItem(state?: string, idToken?: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getOidcAuthTokenItem(state, idToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get OpenID connect URLs
     * @param {string} [providerKey] The key for the provider to use. Leave out to use the default provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getOidcAuthUrlsItem(providerKey?: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getOidcAuthUrlsItem(providerKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get JWT token to login from local user.
     * @param {Credentials} [credentials] Generate new JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postCredentialsItem(credentials?: Credentials, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postCredentialsItem(credentials, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get login info for a screen.
     * @param {object} [body] Get login info with JWT token for given nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postLoginInfoScreen(body?: object, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postLoginInfoScreen(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get JWT token from refresh token.
     * @param {RefreshTokenRequest} [refreshTokenRequest] Refresh JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postRefreshTokenItem(refreshTokenRequest?: RefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postRefreshTokenItem(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeedSourcesApi - axios parameter creator
 * @export
 */
export const FeedSourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Feed Source resource.
         * @summary Retrieve a Feed Source resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedSourceId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFeedSourceId', 'id', id)
            const localVarPath = `/v1/feed-sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get config for name from a feed source.
         * @summary Get config for name from a feed source.
         * @param {string} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1FeedSourceIdConfigName: async (id: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1FeedSourceIdConfigName', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getV1FeedSourceIdConfigName', 'name', name)
            const localVarPath = `/v1/feed_sources/{id}/config/{name}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of FeedSource resources.
         * @summary Retrieves a collection of FeedSource resources.
         * @param {string} supportedFeedOutputType 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {Array<string>} [supportedFeedOutputType2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1FeedSources: async (supportedFeedOutputType: string, page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', supportedFeedOutputType2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supportedFeedOutputType' is not null or undefined
            assertParamExists('getV1FeedSources', 'supportedFeedOutputType', supportedFeedOutputType)
            const localVarPath = `/v1/feed-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (supportedFeedOutputType !== undefined) {
                localVarQueryParameter['supportedFeedOutputType'] = supportedFeedOutputType;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (supportedFeedOutputType2) {
                localVarQueryParameter['supportedFeedOutputType[]'] = supportedFeedOutputType2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedSourcesApi - functional programming interface
 * @export
 */
export const FeedSourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedSourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Feed Source resource.
         * @summary Retrieve a Feed Source resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedSourceId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedSourceId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get config for name from a feed source.
         * @summary Get config for name from a feed source.
         * @param {string} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1FeedSourceIdConfigName(id: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1FeedSourceIdConfigName(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of FeedSource resources.
         * @summary Retrieves a collection of FeedSource resources.
         * @param {string} supportedFeedOutputType 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {Array<string>} [supportedFeedOutputType2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1FeedSources(supportedFeedOutputType: string, page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', supportedFeedOutputType2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1FeedSources(supportedFeedOutputType, page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, supportedFeedOutputType2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedSourcesApi - factory interface
 * @export
 */
export const FeedSourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedSourcesApiFp(configuration)
    return {
        /**
         * Retrieves a Feed Source resource.
         * @summary Retrieve a Feed Source resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedSourceId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getFeedSourceId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get config for name from a feed source.
         * @summary Get config for name from a feed source.
         * @param {string} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1FeedSourceIdConfigName(id: string, name: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1FeedSourceIdConfigName(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of FeedSource resources.
         * @summary Retrieves a collection of FeedSource resources.
         * @param {string} supportedFeedOutputType 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {Array<string>} [supportedFeedOutputType2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1FeedSources(supportedFeedOutputType: string, page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', supportedFeedOutputType2?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.getV1FeedSources(supportedFeedOutputType, page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, supportedFeedOutputType2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedSourcesApi - object-oriented interface
 * @export
 * @class FeedSourcesApi
 * @extends {BaseAPI}
 */
export class FeedSourcesApi extends BaseAPI {
    /**
     * Retrieves a Feed Source resource.
     * @summary Retrieve a Feed Source resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedSourcesApi
     */
    public getFeedSourceId(id: string, options?: AxiosRequestConfig) {
        return FeedSourcesApiFp(this.configuration).getFeedSourceId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get config for name from a feed source.
     * @summary Get config for name from a feed source.
     * @param {string} id 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedSourcesApi
     */
    public getV1FeedSourceIdConfigName(id: string, name: string, options?: AxiosRequestConfig) {
        return FeedSourcesApiFp(this.configuration).getV1FeedSourceIdConfigName(id, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of FeedSource resources.
     * @summary Retrieves a collection of FeedSource resources.
     * @param {string} supportedFeedOutputType 
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {Array<string>} [supportedFeedOutputType2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedSourcesApi
     */
    public getV1FeedSources(supportedFeedOutputType: string, page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', supportedFeedOutputType2?: Array<string>, options?: AxiosRequestConfig) {
        return FeedSourcesApiFp(this.configuration).getV1FeedSources(supportedFeedOutputType, page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, supportedFeedOutputType2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeedsApi - axios parameter creator
 * @export
 */
export const FeedsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Feed resource.
         * @summary Retrieve a Feed resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFeedsId', 'id', id)
            const localVarPath = `/v1/feeds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get data from a feed.
         * @summary Get data from a feed.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1FeedIdData: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1FeedIdData', 'id', id)
            const localVarPath = `/v1/feeds/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of Feed resources.
         * @summary Retrieves a collection of Feed resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Feeds: async (page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedsApi - functional programming interface
 * @export
 */
export const FeedsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Feed resource.
         * @summary Retrieve a Feed resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get data from a feed.
         * @summary Get data from a feed.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1FeedIdData(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1FeedIdData(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of Feed resources.
         * @summary Retrieves a collection of Feed resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Feeds(page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Feeds(page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedsApi - factory interface
 * @export
 */
export const FeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedsApiFp(configuration)
    return {
        /**
         * Retrieves a Feed resource.
         * @summary Retrieve a Feed resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getFeedsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get data from a feed.
         * @summary Get data from a feed.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1FeedIdData(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1FeedIdData(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of Feed resources.
         * @summary Retrieves a collection of Feed resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Feeds(page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1Feeds(page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */
export class FeedsApi extends BaseAPI {
    /**
     * Retrieves a Feed resource.
     * @summary Retrieve a Feed resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public getFeedsId(id: string, options?: AxiosRequestConfig) {
        return FeedsApiFp(this.configuration).getFeedsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get data from a feed.
     * @summary Get data from a feed.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public getV1FeedIdData(id: string, options?: AxiosRequestConfig) {
        return FeedsApiFp(this.configuration).getV1FeedIdData(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of Feed resources.
     * @summary Retrieves a collection of Feed resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public getV1Feeds(page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return FeedsApiFp(this.configuration).getV1Feeds(page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LayoutsApi - axios parameter creator
 * @export
 */
export const LayoutsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a collection of layouts resources.
         * @summary Retrieves a collection of layouts resources.
         * @param {number} [page] 
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Layouts: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/layouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a screen layout resource.
         * @summary Retrieve a screen layout resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1LayoutsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1LayoutsId', 'id', id)
            const localVarPath = `/v1/layouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutsApi - functional programming interface
 * @export
 */
export const LayoutsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a collection of layouts resources.
         * @summary Retrieves a collection of layouts resources.
         * @param {number} [page] 
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Layouts(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Layouts(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a screen layout resource.
         * @summary Retrieve a screen layout resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1LayoutsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1LayoutsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutsApi - factory interface
 * @export
 */
export const LayoutsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutsApiFp(configuration)
    return {
        /**
         * Retrieve a collection of layouts resources.
         * @summary Retrieves a collection of layouts resources.
         * @param {number} [page] 
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Layouts(page?: number, itemsPerPage?: number, options?: any): AxiosPromise<void> {
            return localVarFp.getV1Layouts(page, itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a screen layout resource.
         * @summary Retrieve a screen layout resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1LayoutsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1LayoutsId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutsApi - object-oriented interface
 * @export
 * @class LayoutsApi
 * @extends {BaseAPI}
 */
export class LayoutsApi extends BaseAPI {
    /**
     * Retrieve a collection of layouts resources.
     * @summary Retrieves a collection of layouts resources.
     * @param {number} [page] 
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutsApi
     */
    public getV1Layouts(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig) {
        return LayoutsApiFp(this.configuration).getV1Layouts(page, itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a screen layout resource.
     * @summary Retrieve a screen layout resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutsApi
     */
    public getV1LayoutsId(id: string, options?: AxiosRequestConfig) {
        return LayoutsApiFp(this.configuration).getV1LayoutsId(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a Media resource.
         * @summary Delete a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1MediaId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1MediaId', 'id', id)
            const localVarPath = `/v1/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Media resource.
         * @summary Retrieve a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MediaId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1MediaId', 'id', id)
            const localVarPath = `/v1/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of Slide resources.
         * @summary Retrieves a collection of Slide resources base on Playlist.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MediaSlides: async (id: string, page?: number, itemsPerPage?: string, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1MediaSlides', 'id', id)
            const localVarPath = `/v1/media/{id}/slides`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of Media resources.
         * @summary Retrieves a collection of Media resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Medias: async (page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Media resource.
         * @summary Creates a Media resource.
         * @param {string} title 
         * @param {string} description 
         * @param {string} license 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMediaCollection: async (title: string, description: string, license: string, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('postMediaCollection', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('postMediaCollection', 'description', description)
            // verify required parameter 'license' is not null or undefined
            assertParamExists('postMediaCollection', 'license', license)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postMediaCollection', 'file', file)
            const localVarPath = `/v1/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (license !== undefined) { 
                localVarFormParams.append('license', license as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a Media resource.
         * @summary Delete a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1MediaId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1MediaId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Media resource.
         * @summary Retrieve a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1MediaId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1MediaId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of Slide resources.
         * @summary Retrieves a collection of Slide resources base on Playlist.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1MediaSlides(id: string, page?: number, itemsPerPage?: string, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1MediaSlides(id, page, itemsPerPage, published, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of Media resources.
         * @summary Retrieves a collection of Media resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Medias(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Medias(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Media resource.
         * @summary Creates a Media resource.
         * @param {string} title 
         * @param {string} description 
         * @param {string} license 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMediaCollection(title: string, description: string, license: string, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaMediaJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMediaCollection(title, description, license, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * Delete a Media resource.
         * @summary Delete a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1MediaId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1MediaId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Media resource.
         * @summary Retrieve a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MediaId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1MediaId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of Slide resources.
         * @summary Retrieves a collection of Slide resources base on Playlist.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MediaSlides(id: string, page?: number, itemsPerPage?: string, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1MediaSlides(id, page, itemsPerPage, published, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of Media resources.
         * @summary Retrieves a collection of Media resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Medias(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1Medias(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Media resource.
         * @summary Creates a Media resource.
         * @param {string} title 
         * @param {string} description 
         * @param {string} license 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMediaCollection(title: string, description: string, license: string, file: any, options?: any): AxiosPromise<MediaMediaJsonld> {
            return localVarFp.postMediaCollection(title, description, license, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * Delete a Media resource.
     * @summary Delete a Media resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public deleteV1MediaId(id: string, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).deleteV1MediaId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Media resource.
     * @summary Retrieve a Media resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getV1MediaId(id: string, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).getV1MediaId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of Slide resources.
     * @summary Retrieves a collection of Slide resources base on Playlist.
     * @param {string} id 
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {boolean} [published] If true only published content will be shown
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getV1MediaSlides(id: string, page?: number, itemsPerPage?: string, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).getV1MediaSlides(id, page, itemsPerPage, published, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a collection of Media resources.
     * @summary Retrieves a collection of Media resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getV1Medias(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).getV1Medias(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Media resource.
     * @summary Creates a Media resource.
     * @param {string} title 
     * @param {string} description 
     * @param {string} license 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public postMediaCollection(title: string, description: string, license: string, file: any, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).postMediaCollection(title, description, license, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlaylistsApi - axios parameter creator
 * @export
 */
export const PlaylistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Playlist resource.
         * @summary Creates a Playlist resource.
         * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The new Playlist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Playlist: async (playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistPlaylistInputJsonld' is not null or undefined
            assertParamExists('createV1Playlist', 'playlistPlaylistInputJsonld', playlistPlaylistInputJsonld)
            const localVarPath = `/v1/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playlistPlaylistInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Playlist resource.
         * @summary Delete a Playlist resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PlaylistId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1PlaylistId', 'id', id)
            const localVarPath = `/v1/playlists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a slide from a playlist.
         * @summary Delete a slide from a playlist.
         * @param {string} id 
         * @param {string} slideId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PlaylistSlideId: async (id: string, slideId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1PlaylistSlideId', 'id', id)
            // verify required parameter 'slideId' is not null or undefined
            assertParamExists('deleteV1PlaylistSlideId', 'slideId', slideId)
            const localVarPath = `/v1/playlists/{id}/slides/{slideId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"slideId"}}`, encodeURIComponent(String(slideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Screen resources on campaign.
         * @summary Get Screen resources on campaign.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CampaignIdScreen: async (id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1CampaignIdScreen', 'id', id)
            const localVarPath = `/v1/campaigns/{id}/screens`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Screen group resources on campaign.
         * @summary Get Screen group resources on campaign.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CampaignIdScreenGroup: async (id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1CampaignIdScreenGroup', 'id', id)
            const localVarPath = `/v1/campaigns/{id}/screen-groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a Playlist resource.
         * @summary Retrieves a Playlist resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PlaylistId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1PlaylistId', 'id', id)
            const localVarPath = `/v1/playlists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves collection of weight Slide resources.
         * @summary Retrieves collection of weight Slide resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PlaylistSlideId: async (id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1PlaylistSlideId', 'id', id)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getV1PlaylistSlideId', 'page', page)
            const localVarPath = `/v1/playlists/{id}/slides`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of Playlist resources.
         * @summary Retrieve a collection of Playlist resources.
         * @param {number} page 
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {boolean} [isCampaign] If true only campaigns will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {string} [tenantsTenantKey] 
         * @param {Array<string>} [tenantsTenantKey2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Playlists: async (page: number, itemsPerPage?: number, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, isCampaign?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', tenantsTenantKey?: string, tenantsTenantKey2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getV1Playlists', 'page', page)
            const localVarPath = `/v1/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (isCampaign !== undefined) {
                localVarQueryParameter['isCampaign'] = isCampaign;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (tenantsTenantKey !== undefined) {
                localVarQueryParameter['tenants.tenantKey'] = tenantsTenantKey;
            }

            if (tenantsTenantKey2) {
                localVarQueryParameter['tenants.tenantKey[]'] = tenantsTenantKey2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves collection of playlist resources.
         * @summary Retrieves collection of playlistresources.
         * @param {string} id 
         * @param {Array<InlineObject4>} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1SlidePlaylistId: async (id: string, inlineObject4?: Array<InlineObject4>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1SlidePlaylistId', 'id', id)
            const localVarPath = `/v1/slides/{id}/playlists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Playlist resource.
         * @summary Update a Playlist resource.
         * @param {string} id 
         * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The updated Playlist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1PlaylistId: async (id: string, playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1PlaylistId', 'id', id)
            // verify required parameter 'playlistPlaylistInputJsonld' is not null or undefined
            assertParamExists('putV1PlaylistId', 'playlistPlaylistInputJsonld', playlistPlaylistInputJsonld)
            const localVarPath = `/v1/playlists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playlistPlaylistInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the collection of slide on a playlist.
         * @summary Update the collection of slide on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject>} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1PlaylistSlideId: async (id: string, inlineObject?: Array<InlineObject>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1PlaylistSlideId', 'id', id)
            const localVarPath = `/v1/playlists/{id}/slides`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the collection of playlist on a slide.
         * @summary Get the collection of playlist on a slide.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1SlidePlaylistId: async (id: string, page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1SlidePlaylistId', 'id', id)
            const localVarPath = `/v1/slides/{id}/playlists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaylistsApi - functional programming interface
 * @export
 */
export const PlaylistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaylistsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Playlist resource.
         * @summary Creates a Playlist resource.
         * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The new Playlist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV1Playlist(playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistPlaylistJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createV1Playlist(playlistPlaylistInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Playlist resource.
         * @summary Delete a Playlist resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1PlaylistId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1PlaylistId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a slide from a playlist.
         * @summary Delete a slide from a playlist.
         * @param {string} id 
         * @param {string} slideId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1PlaylistSlideId(id: string, slideId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1PlaylistSlideId(id, slideId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Screen resources on campaign.
         * @summary Get Screen resources on campaign.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CampaignIdScreen(id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CampaignIdScreen(id, page, itemsPerPage, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Screen group resources on campaign.
         * @summary Get Screen group resources on campaign.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CampaignIdScreenGroup(id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CampaignIdScreenGroup(id, page, itemsPerPage, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a Playlist resource.
         * @summary Retrieves a Playlist resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PlaylistId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PlaylistId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves collection of weight Slide resources.
         * @summary Retrieves collection of weight Slide resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PlaylistSlideId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PlaylistSlideId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of Playlist resources.
         * @summary Retrieve a collection of Playlist resources.
         * @param {number} page 
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {boolean} [isCampaign] If true only campaigns will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {string} [tenantsTenantKey] 
         * @param {Array<string>} [tenantsTenantKey2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Playlists(page: number, itemsPerPage?: number, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, isCampaign?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', tenantsTenantKey?: string, tenantsTenantKey2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Playlists(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, published, isCampaign, orderTitle, orderDescription, orderCreatedAt, tenantsTenantKey, tenantsTenantKey2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves collection of playlist resources.
         * @summary Retrieves collection of playlistresources.
         * @param {string} id 
         * @param {Array<InlineObject4>} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1SlidePlaylistId(id: string, inlineObject4?: Array<InlineObject4>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1SlidePlaylistId(id, inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Playlist resource.
         * @summary Update a Playlist resource.
         * @param {string} id 
         * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The updated Playlist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1PlaylistId(id: string, playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistPlaylistJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1PlaylistId(id, playlistPlaylistInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the collection of slide on a playlist.
         * @summary Update the collection of slide on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject>} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1PlaylistSlideId(id: string, inlineObject?: Array<InlineObject>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSlidePlaylistSlideJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1PlaylistSlideId(id, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the collection of playlist on a slide.
         * @summary Get the collection of playlist on a slide.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1SlidePlaylistId(id: string, page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1SlidePlaylistId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlaylistsApi - factory interface
 * @export
 */
export const PlaylistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaylistsApiFp(configuration)
    return {
        /**
         * Creates a Playlist resource.
         * @summary Creates a Playlist resource.
         * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The new Playlist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Playlist(playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options?: any): AxiosPromise<PlaylistPlaylistJsonld> {
            return localVarFp.createV1Playlist(playlistPlaylistInputJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Playlist resource.
         * @summary Delete a Playlist resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PlaylistId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1PlaylistId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a slide from a playlist.
         * @summary Delete a slide from a playlist.
         * @param {string} id 
         * @param {string} slideId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PlaylistSlideId(id: string, slideId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1PlaylistSlideId(id, slideId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Screen resources on campaign.
         * @summary Get Screen resources on campaign.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CampaignIdScreen(id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getV1CampaignIdScreen(id, page, itemsPerPage, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Screen group resources on campaign.
         * @summary Get Screen group resources on campaign.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CampaignIdScreenGroup(id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getV1CampaignIdScreenGroup(id, page, itemsPerPage, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a Playlist resource.
         * @summary Retrieves a Playlist resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PlaylistId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1PlaylistId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves collection of weight Slide resources.
         * @summary Retrieves collection of weight Slide resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PlaylistSlideId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1PlaylistSlideId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of Playlist resources.
         * @summary Retrieve a collection of Playlist resources.
         * @param {number} page 
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {boolean} [isCampaign] If true only campaigns will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {string} [tenantsTenantKey] 
         * @param {Array<string>} [tenantsTenantKey2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Playlists(page: number, itemsPerPage?: number, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, isCampaign?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', tenantsTenantKey?: string, tenantsTenantKey2?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.getV1Playlists(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, published, isCampaign, orderTitle, orderDescription, orderCreatedAt, tenantsTenantKey, tenantsTenantKey2, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves collection of playlist resources.
         * @summary Retrieves collection of playlistresources.
         * @param {string} id 
         * @param {Array<InlineObject4>} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1SlidePlaylistId(id: string, inlineObject4?: Array<InlineObject4>, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getV1SlidePlaylistId(id, inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Playlist resource.
         * @summary Update a Playlist resource.
         * @param {string} id 
         * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The updated Playlist resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1PlaylistId(id: string, playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options?: any): AxiosPromise<PlaylistPlaylistJsonld> {
            return localVarFp.putV1PlaylistId(id, playlistPlaylistInputJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the collection of slide on a playlist.
         * @summary Update the collection of slide on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject>} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1PlaylistSlideId(id: string, inlineObject?: Array<InlineObject>, options?: any): AxiosPromise<PlaylistSlidePlaylistSlideJsonld> {
            return localVarFp.putV1PlaylistSlideId(id, inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the collection of playlist on a slide.
         * @summary Get the collection of playlist on a slide.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1SlidePlaylistId(id: string, page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.putV1SlidePlaylistId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaylistsApi - object-oriented interface
 * @export
 * @class PlaylistsApi
 * @extends {BaseAPI}
 */
export class PlaylistsApi extends BaseAPI {
    /**
     * Creates a Playlist resource.
     * @summary Creates a Playlist resource.
     * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The new Playlist resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public createV1Playlist(playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).createV1Playlist(playlistPlaylistInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Playlist resource.
     * @summary Delete a Playlist resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public deleteV1PlaylistId(id: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).deleteV1PlaylistId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a slide from a playlist.
     * @summary Delete a slide from a playlist.
     * @param {string} id 
     * @param {string} slideId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public deleteV1PlaylistSlideId(id: string, slideId: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).deleteV1PlaylistSlideId(id, slideId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Screen resources on campaign.
     * @summary Get Screen resources on campaign.
     * @param {string} id 
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getV1CampaignIdScreen(id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getV1CampaignIdScreen(id, page, itemsPerPage, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Screen group resources on campaign.
     * @summary Get Screen group resources on campaign.
     * @param {string} id 
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getV1CampaignIdScreenGroup(id: string, page?: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getV1CampaignIdScreenGroup(id, page, itemsPerPage, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a Playlist resource.
     * @summary Retrieves a Playlist resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getV1PlaylistId(id: string, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getV1PlaylistId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves collection of weight Slide resources.
     * @summary Retrieves collection of weight Slide resources.
     * @param {string} id 
     * @param {number} page 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {boolean} [published] If true only published content will be shown
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getV1PlaylistSlideId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getV1PlaylistSlideId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of Playlist resources.
     * @summary Retrieve a collection of Playlist resources.
     * @param {number} page 
     * @param {number} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {boolean} [published] If true only published content will be shown
     * @param {boolean} [isCampaign] If true only campaigns will be shown
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {string} [tenantsTenantKey] 
     * @param {Array<string>} [tenantsTenantKey2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getV1Playlists(page: number, itemsPerPage?: number, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, isCampaign?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', tenantsTenantKey?: string, tenantsTenantKey2?: Array<string>, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getV1Playlists(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, published, isCampaign, orderTitle, orderDescription, orderCreatedAt, tenantsTenantKey, tenantsTenantKey2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves collection of playlist resources.
     * @summary Retrieves collection of playlistresources.
     * @param {string} id 
     * @param {Array<InlineObject4>} [inlineObject4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getV1SlidePlaylistId(id: string, inlineObject4?: Array<InlineObject4>, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getV1SlidePlaylistId(id, inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Playlist resource.
     * @summary Update a Playlist resource.
     * @param {string} id 
     * @param {PlaylistPlaylistInputJsonld} playlistPlaylistInputJsonld The updated Playlist resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public putV1PlaylistId(id: string, playlistPlaylistInputJsonld: PlaylistPlaylistInputJsonld, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).putV1PlaylistId(id, playlistPlaylistInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the collection of slide on a playlist.
     * @summary Update the collection of slide on a playlist.
     * @param {string} id Resource identifier
     * @param {Array<InlineObject>} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public putV1PlaylistSlideId(id: string, inlineObject?: Array<InlineObject>, options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).putV1PlaylistSlideId(id, inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the collection of playlist on a slide.
     * @summary Get the collection of playlist on a slide.
     * @param {string} id 
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {boolean} [published] If true only published content will be shown
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public putV1SlidePlaylistId(id: string, page?: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).putV1SlidePlaylistId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScreenGroupCampaignApi - axios parameter creator
 * @export
 */
export const ScreenGroupCampaignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ScreenGroupCampaign resource.
         * @summary Retrieves a ScreenGroupCampaign resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenGroupCampaignItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScreenGroupCampaignItem', 'id', id)
            const localVarPath = `/v1/screen-groups-campaigns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScreenGroupCampaignApi - functional programming interface
 * @export
 */
export const ScreenGroupCampaignApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScreenGroupCampaignApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ScreenGroupCampaign resource.
         * @summary Retrieves a ScreenGroupCampaign resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenGroupCampaignItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenGroupCampaignScreenGroupCampaignJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreenGroupCampaignItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScreenGroupCampaignApi - factory interface
 * @export
 */
export const ScreenGroupCampaignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScreenGroupCampaignApiFp(configuration)
    return {
        /**
         * Retrieves a ScreenGroupCampaign resource.
         * @summary Retrieves a ScreenGroupCampaign resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenGroupCampaignItem(id: string, options?: any): AxiosPromise<ScreenGroupCampaignScreenGroupCampaignJsonld> {
            return localVarFp.getScreenGroupCampaignItem(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScreenGroupCampaignApi - object-oriented interface
 * @export
 * @class ScreenGroupCampaignApi
 * @extends {BaseAPI}
 */
export class ScreenGroupCampaignApi extends BaseAPI {
    /**
     * Retrieves a ScreenGroupCampaign resource.
     * @summary Retrieves a ScreenGroupCampaign resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupCampaignApi
     */
    public getScreenGroupCampaignItem(id: string, options?: AxiosRequestConfig) {
        return ScreenGroupCampaignApiFp(this.configuration).getScreenGroupCampaignItem(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScreenGroupsApi - axios parameter creator
 * @export
 */
export const ScreenGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a campaign from a screen group.
         * @summary Delete a campaign from a screen group.
         * @param {string} id 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenGroupsCampaignId: async (id: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1ScreenGroupsCampaignId', 'id', id)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('deleteV1ScreenGroupsCampaignId', 'campaignId', campaignId)
            const localVarPath = `/v1/screen-groups/{id}/campaigns/{campaignId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Screen group resource.
         * @summary Delete a Screen group resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenGroupsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1ScreenGroupsId', 'id', id)
            const localVarPath = `/v1/screen-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of Screen group resources.
         * @summary Retrieves a collection of Screen group resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenGroups: async (page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/screen-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves collection of campaign resources.
         * @summary Retrieves collection of campaign resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenGroupsCampaignId: async (id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1ScreenGroupsCampaignId', 'id', id)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getV1ScreenGroupsCampaignId', 'page', page)
            const localVarPath = `/v1/screen-groups/{id}/campaigns`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Screen group resource.
         * @summary Retrieve a Screen group resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenGroupsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1ScreenGroupsId', 'id', id)
            const localVarPath = `/v1/screen-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get screens in screen group.
         * @summary Gets screens in screen group.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenIdScreenGroup: async (id: string, page?: number, itemsPerPage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1ScreenIdScreenGroup', 'id', id)
            const localVarPath = `/v1/screen-groups/{id}/screens`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Screen group resources.
         * @summary Create Screen group resources.
         * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The new ScreenGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1ScreenGroups: async (screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenGroupScreenGroupInputJsonld' is not null or undefined
            assertParamExists('postV1ScreenGroups', 'screenGroupScreenGroupInputJsonld', screenGroupScreenGroupInputJsonld)
            const localVarPath = `/v1/screen-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(screenGroupScreenGroupInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the collection of screen groups on a playlist.
         * @summary Update the collection of screen groups on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject1>} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenGroupsCampaignId: async (id: string, inlineObject1?: Array<InlineObject1>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1ScreenGroupsCampaignId', 'id', id)
            const localVarPath = `/v1/screen-groups/{id}/campaigns`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Screen group resource.
         * @summary Update a Screen group resource.
         * @param {string} id 
         * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The updated ScreenGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenGroupsId: async (id: string, screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1ScreenGroupsId', 'id', id)
            // verify required parameter 'screenGroupScreenGroupInputJsonld' is not null or undefined
            assertParamExists('putV1ScreenGroupsId', 'screenGroupScreenGroupInputJsonld', screenGroupScreenGroupInputJsonld)
            const localVarPath = `/v1/screen-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(screenGroupScreenGroupInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScreenGroupsApi - functional programming interface
 * @export
 */
export const ScreenGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScreenGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a campaign from a screen group.
         * @summary Delete a campaign from a screen group.
         * @param {string} id 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1ScreenGroupsCampaignId(id: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1ScreenGroupsCampaignId(id, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Screen group resource.
         * @summary Delete a Screen group resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1ScreenGroupsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1ScreenGroupsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of Screen group resources.
         * @summary Retrieves a collection of Screen group resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1ScreenGroups(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1ScreenGroups(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves collection of campaign resources.
         * @summary Retrieves collection of campaign resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1ScreenGroupsCampaignId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1ScreenGroupsCampaignId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Screen group resource.
         * @summary Retrieve a Screen group resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1ScreenGroupsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1ScreenGroupsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get screens in screen group.
         * @summary Gets screens in screen group.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1ScreenIdScreenGroup(id: string, page?: number, itemsPerPage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1ScreenIdScreenGroup(id, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Screen group resources.
         * @summary Create Screen group resources.
         * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The new ScreenGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1ScreenGroups(screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenGroupScreenGroupJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1ScreenGroups(screenGroupScreenGroupInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the collection of screen groups on a playlist.
         * @summary Update the collection of screen groups on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject1>} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1ScreenGroupsCampaignId(id: string, inlineObject1?: Array<InlineObject1>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenGroupCampaignScreenGroupCampaignJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1ScreenGroupsCampaignId(id, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Screen group resource.
         * @summary Update a Screen group resource.
         * @param {string} id 
         * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The updated ScreenGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1ScreenGroupsId(id: string, screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenGroupScreenGroupJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1ScreenGroupsId(id, screenGroupScreenGroupInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScreenGroupsApi - factory interface
 * @export
 */
export const ScreenGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScreenGroupsApiFp(configuration)
    return {
        /**
         * Delete a campaign from a screen group.
         * @summary Delete a campaign from a screen group.
         * @param {string} id 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenGroupsCampaignId(id: string, campaignId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1ScreenGroupsCampaignId(id, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Screen group resource.
         * @summary Delete a Screen group resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenGroupsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1ScreenGroupsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of Screen group resources.
         * @summary Retrieves a collection of Screen group resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenGroups(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1ScreenGroups(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves collection of campaign resources.
         * @summary Retrieves collection of campaign resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenGroupsCampaignId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1ScreenGroupsCampaignId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Screen group resource.
         * @summary Retrieve a Screen group resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenGroupsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1ScreenGroupsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get screens in screen group.
         * @summary Gets screens in screen group.
         * @param {string} id 
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenIdScreenGroup(id: string, page?: number, itemsPerPage?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getV1ScreenIdScreenGroup(id, page, itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Screen group resources.
         * @summary Create Screen group resources.
         * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The new ScreenGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1ScreenGroups(screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options?: any): AxiosPromise<ScreenGroupScreenGroupJsonld> {
            return localVarFp.postV1ScreenGroups(screenGroupScreenGroupInputJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the collection of screen groups on a playlist.
         * @summary Update the collection of screen groups on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject1>} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenGroupsCampaignId(id: string, inlineObject1?: Array<InlineObject1>, options?: any): AxiosPromise<ScreenGroupCampaignScreenGroupCampaignJsonld> {
            return localVarFp.putV1ScreenGroupsCampaignId(id, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Screen group resource.
         * @summary Update a Screen group resource.
         * @param {string} id 
         * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The updated ScreenGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenGroupsId(id: string, screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options?: any): AxiosPromise<ScreenGroupScreenGroupJsonld> {
            return localVarFp.putV1ScreenGroupsId(id, screenGroupScreenGroupInputJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScreenGroupsApi - object-oriented interface
 * @export
 * @class ScreenGroupsApi
 * @extends {BaseAPI}
 */
export class ScreenGroupsApi extends BaseAPI {
    /**
     * Delete a campaign from a screen group.
     * @summary Delete a campaign from a screen group.
     * @param {string} id 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public deleteV1ScreenGroupsCampaignId(id: string, campaignId: string, options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).deleteV1ScreenGroupsCampaignId(id, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Screen group resource.
     * @summary Delete a Screen group resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public deleteV1ScreenGroupsId(id: string, options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).deleteV1ScreenGroupsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a collection of Screen group resources.
     * @summary Retrieves a collection of Screen group resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public getV1ScreenGroups(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).getV1ScreenGroups(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves collection of campaign resources.
     * @summary Retrieves collection of campaign resources.
     * @param {string} id 
     * @param {number} page 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {boolean} [published] If true only published content will be shown
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public getV1ScreenGroupsCampaignId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).getV1ScreenGroupsCampaignId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Screen group resource.
     * @summary Retrieve a Screen group resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public getV1ScreenGroupsId(id: string, options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).getV1ScreenGroupsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get screens in screen group.
     * @summary Gets screens in screen group.
     * @param {string} id 
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public getV1ScreenIdScreenGroup(id: string, page?: number, itemsPerPage?: string, options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).getV1ScreenIdScreenGroup(id, page, itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Screen group resources.
     * @summary Create Screen group resources.
     * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The new ScreenGroup resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public postV1ScreenGroups(screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).postV1ScreenGroups(screenGroupScreenGroupInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the collection of screen groups on a playlist.
     * @summary Update the collection of screen groups on a playlist.
     * @param {string} id Resource identifier
     * @param {Array<InlineObject1>} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public putV1ScreenGroupsCampaignId(id: string, inlineObject1?: Array<InlineObject1>, options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).putV1ScreenGroupsCampaignId(id, inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Screen group resource.
     * @summary Update a Screen group resource.
     * @param {string} id 
     * @param {ScreenGroupScreenGroupInputJsonld} screenGroupScreenGroupInputJsonld The updated ScreenGroup resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenGroupsApi
     */
    public putV1ScreenGroupsId(id: string, screenGroupScreenGroupInputJsonld: ScreenGroupScreenGroupInputJsonld, options?: AxiosRequestConfig) {
        return ScreenGroupsApiFp(this.configuration).putV1ScreenGroupsId(id, screenGroupScreenGroupInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScreensApi - axios parameter creator
 * @export
 */
export const ScreensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Screen resource.
         * @summary Creates a Screen resource.
         * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The new Screen resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Screens: async (screenScreenInputJsonld: ScreenScreenInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenScreenInputJsonld' is not null or undefined
            assertParamExists('createV1Screens', 'screenScreenInputJsonld', screenScreenInputJsonld)
            const localVarPath = `/v1/screens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(screenScreenInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove Playlist resource from screen region.
         * @summary Remove Playlist resource from screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaylistScreenRegionItem: async (id: string, regionId: string, playlistId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePlaylistScreenRegionItem', 'id', id)
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('deletePlaylistScreenRegionItem', 'regionId', regionId)
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('deletePlaylistScreenRegionItem', 'playlistId', playlistId)
            const localVarPath = `/v1/screens/{id}/regions/{regionId}/playlists/{playlistId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)))
                .replace(`{${"playlistId"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a campaign from a screen.
         * @summary Delete a campaign from a screen.
         * @param {string} id 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenCampaignId: async (id: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1ScreenCampaignId', 'id', id)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('deleteV1ScreenCampaignId', 'campaignId', campaignId)
            const localVarPath = `/v1/screens/{id}/campaigns/{campaignId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a screen groups from a screen.
         * @summary Delete a screen groups from a screen
         * @param {string} id 
         * @param {string} screenGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenGroupScreenId: async (id: string, screenGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1ScreenGroupScreenId', 'id', id)
            // verify required parameter 'screenGroupId' is not null or undefined
            assertParamExists('deleteV1ScreenGroupScreenId', 'screenGroupId', screenGroupId)
            const localVarPath = `/v1/screens/{id}/screen-groups/{screenGroupId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"screenGroupId"}}`, encodeURIComponent(String(screenGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Screen resource.
         * @summary Delete a Screen resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1ScreenId', 'id', id)
            const localVarPath = `/v1/screens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Screen resource.
         * @summary Retrieve a Screen resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreensId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScreensId', 'id', id)
            const localVarPath = `/v1/screens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a Playlist resources base on screen regions.
         * @summary Retrieves a Playlist resources base on screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PlaylistScreenRegions: async (id: string, regionId: string, page: number, itemsPerPage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1PlaylistScreenRegions', 'id', id)
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('getV1PlaylistScreenRegions', 'regionId', regionId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getV1PlaylistScreenRegions', 'page', page)
            const localVarPath = `/v1/screens/{id}/regions/{regionId}/playlists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves collection of campaign resources.
         * @summary Retrieves collection of campaign resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenCampaignId: async (id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1ScreenCampaignId', 'id', id)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getV1ScreenCampaignId', 'page', page)
            const localVarPath = `/v1/screens/{id}/campaigns`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve ScreeGroups collection base on screen id.
         * @summary Retrieve ScreeGroups collection base on screen id.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenIdScreenGroups: async (id: string, page: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1ScreenIdScreenGroups', 'id', id)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getV1ScreenIdScreenGroups', 'page', page)
            const localVarPath = `/v1/screens/{id}/screen-groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of Screen resources.
         * @summary Retrieves a collection of Screen resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [search] Search on both location and title
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Screens: async (page?: number, itemsPerPage?: string, search?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/screens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bind screen with BindKey
         * @param {string} id The screen id
         * @param {ScreenBindObject} [screenBindObject] Bind the screen with the bind key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScreenBindKey: async (id: string, screenBindObject?: ScreenBindObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postScreenBindKey', 'id', id)
            const localVarPath = `/v1/screens/{id}/bind`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(screenBindObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unbind screen from machine
         * @param {string} id The screen id
         * @param {any} [body] Unbind from machine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScreenUnbind: async (id: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postScreenUnbind', 'id', id)
            const localVarPath = `/v1/screens/{id}/unbind`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Playlist resource from screen region.
         * @summary Add Playlist resource from screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {Array<InlineObject3>} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPlaylistScreenRegionItem: async (id: string, regionId: string, inlineObject3?: Array<InlineObject3>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPlaylistScreenRegionItem', 'id', id)
            // verify required parameter 'regionId' is not null or undefined
            assertParamExists('putPlaylistScreenRegionItem', 'regionId', regionId)
            const localVarPath = `/v1/screens/{id}/regions/{regionId}/playlists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"regionId"}}`, encodeURIComponent(String(regionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the collection of screens on a playlist.
         * @summary Update the collection of screens on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject2>} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenCampaignId: async (id: string, inlineObject2?: Array<InlineObject2>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1ScreenCampaignId', 'id', id)
            const localVarPath = `/v1/screens/{id}/campaigns`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the collection of ScreenGroups on a Screen.
         * @summary Update the collection of ScreenGroups on a Screen.
         * @param {string} id 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenGroupsScreen: async (id: string, requestBody?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1ScreenGroupsScreen', 'id', id)
            const localVarPath = `/v1/screens/{id}/screen-groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Screen resource.
         * @summary Update a Screen resource.
         * @param {string} id 
         * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The updated Screen resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenId: async (id: string, screenScreenInputJsonld: ScreenScreenInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1ScreenId', 'id', id)
            // verify required parameter 'screenScreenInputJsonld' is not null or undefined
            assertParamExists('putV1ScreenId', 'screenScreenInputJsonld', screenScreenInputJsonld)
            const localVarPath = `/v1/screens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(screenScreenInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScreensApi - functional programming interface
 * @export
 */
export const ScreensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScreensApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Screen resource.
         * @summary Creates a Screen resource.
         * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The new Screen resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV1Screens(screenScreenInputJsonld: ScreenScreenInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenScreenJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createV1Screens(screenScreenInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove Playlist resource from screen region.
         * @summary Remove Playlist resource from screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlaylistScreenRegionItem(id: string, regionId: string, playlistId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlaylistScreenRegionItem(id, regionId, playlistId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a campaign from a screen.
         * @summary Delete a campaign from a screen.
         * @param {string} id 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1ScreenCampaignId(id: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1ScreenCampaignId(id, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a screen groups from a screen.
         * @summary Delete a screen groups from a screen
         * @param {string} id 
         * @param {string} screenGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1ScreenGroupScreenId(id: string, screenGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1ScreenGroupScreenId(id, screenGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Screen resource.
         * @summary Delete a Screen resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1ScreenId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1ScreenId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Screen resource.
         * @summary Retrieve a Screen resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreensId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreensId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a Playlist resources base on screen regions.
         * @summary Retrieves a Playlist resources base on screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PlaylistScreenRegions(id: string, regionId: string, page: number, itemsPerPage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PlaylistScreenRegions(id, regionId, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves collection of campaign resources.
         * @summary Retrieves collection of campaign resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1ScreenCampaignId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1ScreenCampaignId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve ScreeGroups collection base on screen id.
         * @summary Retrieve ScreeGroups collection base on screen id.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1ScreenIdScreenGroups(id: string, page: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1ScreenIdScreenGroups(id, page, itemsPerPage, orderTitle, orderDescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of Screen resources.
         * @summary Retrieves a collection of Screen resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [search] Search on both location and title
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Screens(page?: number, itemsPerPage?: string, search?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Screens(page, itemsPerPage, search, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bind screen with BindKey
         * @param {string} id The screen id
         * @param {ScreenBindObject} [screenBindObject] Bind the screen with the bind key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScreenBindKey(id: string, screenBindObject?: ScreenBindObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postScreenBindKey(id, screenBindObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unbind screen from machine
         * @param {string} id The screen id
         * @param {any} [body] Unbind from machine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postScreenUnbind(id: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postScreenUnbind(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Playlist resource from screen region.
         * @summary Add Playlist resource from screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {Array<InlineObject3>} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPlaylistScreenRegionItem(id: string, regionId: string, inlineObject3?: Array<InlineObject3>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPlaylistScreenRegionItem(id, regionId, inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the collection of screens on a playlist.
         * @summary Update the collection of screens on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject2>} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1ScreenCampaignId(id: string, inlineObject2?: Array<InlineObject2>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenCampaignScreenCampaignJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1ScreenCampaignId(id, inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the collection of ScreenGroups on a Screen.
         * @summary Update the collection of ScreenGroups on a Screen.
         * @param {string} id 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1ScreenGroupsScreen(id: string, requestBody?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1ScreenGroupsScreen(id, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Screen resource.
         * @summary Update a Screen resource.
         * @param {string} id 
         * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The updated Screen resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1ScreenId(id: string, screenScreenInputJsonld: ScreenScreenInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenScreenJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1ScreenId(id, screenScreenInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScreensApi - factory interface
 * @export
 */
export const ScreensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScreensApiFp(configuration)
    return {
        /**
         * Creates a Screen resource.
         * @summary Creates a Screen resource.
         * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The new Screen resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Screens(screenScreenInputJsonld: ScreenScreenInputJsonld, options?: any): AxiosPromise<ScreenScreenJsonld> {
            return localVarFp.createV1Screens(screenScreenInputJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove Playlist resource from screen region.
         * @summary Remove Playlist resource from screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaylistScreenRegionItem(id: string, regionId: string, playlistId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePlaylistScreenRegionItem(id, regionId, playlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a campaign from a screen.
         * @summary Delete a campaign from a screen.
         * @param {string} id 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenCampaignId(id: string, campaignId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1ScreenCampaignId(id, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a screen groups from a screen.
         * @summary Delete a screen groups from a screen
         * @param {string} id 
         * @param {string} screenGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenGroupScreenId(id: string, screenGroupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1ScreenGroupScreenId(id, screenGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Screen resource.
         * @summary Delete a Screen resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ScreenId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1ScreenId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Screen resource.
         * @summary Retrieve a Screen resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreensId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getScreensId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a Playlist resources base on screen regions.
         * @summary Retrieves a Playlist resources base on screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PlaylistScreenRegions(id: string, regionId: string, page: number, itemsPerPage?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getV1PlaylistScreenRegions(id, regionId, page, itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves collection of campaign resources.
         * @summary Retrieves collection of campaign resources.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenCampaignId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1ScreenCampaignId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve ScreeGroups collection base on screen id.
         * @summary Retrieve ScreeGroups collection base on screen id.
         * @param {string} id 
         * @param {number} page 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ScreenIdScreenGroups(id: string, page: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getV1ScreenIdScreenGroups(id, page, itemsPerPage, orderTitle, orderDescription, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of Screen resources.
         * @summary Retrieves a collection of Screen resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [search] Search on both location and title
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Screens(page?: number, itemsPerPage?: string, search?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1Screens(page, itemsPerPage, search, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bind screen with BindKey
         * @param {string} id The screen id
         * @param {ScreenBindObject} [screenBindObject] Bind the screen with the bind key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScreenBindKey(id: string, screenBindObject?: ScreenBindObject, options?: any): AxiosPromise<void> {
            return localVarFp.postScreenBindKey(id, screenBindObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unbind screen from machine
         * @param {string} id The screen id
         * @param {any} [body] Unbind from machine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postScreenUnbind(id: string, body?: any, options?: any): AxiosPromise<void> {
            return localVarFp.postScreenUnbind(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Playlist resource from screen region.
         * @summary Add Playlist resource from screen region.
         * @param {string} id 
         * @param {string} regionId 
         * @param {Array<InlineObject3>} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPlaylistScreenRegionItem(id: string, regionId: string, inlineObject3?: Array<InlineObject3>, options?: any): AxiosPromise<void> {
            return localVarFp.putPlaylistScreenRegionItem(id, regionId, inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the collection of screens on a playlist.
         * @summary Update the collection of screens on a playlist.
         * @param {string} id Resource identifier
         * @param {Array<InlineObject2>} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenCampaignId(id: string, inlineObject2?: Array<InlineObject2>, options?: any): AxiosPromise<ScreenCampaignScreenCampaignJsonld> {
            return localVarFp.putV1ScreenCampaignId(id, inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the collection of ScreenGroups on a Screen.
         * @summary Update the collection of ScreenGroups on a Screen.
         * @param {string} id 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenGroupsScreen(id: string, requestBody?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.putV1ScreenGroupsScreen(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Screen resource.
         * @summary Update a Screen resource.
         * @param {string} id 
         * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The updated Screen resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ScreenId(id: string, screenScreenInputJsonld: ScreenScreenInputJsonld, options?: any): AxiosPromise<ScreenScreenJsonld> {
            return localVarFp.putV1ScreenId(id, screenScreenInputJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScreensApi - object-oriented interface
 * @export
 * @class ScreensApi
 * @extends {BaseAPI}
 */
export class ScreensApi extends BaseAPI {
    /**
     * Creates a Screen resource.
     * @summary Creates a Screen resource.
     * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The new Screen resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public createV1Screens(screenScreenInputJsonld: ScreenScreenInputJsonld, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).createV1Screens(screenScreenInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove Playlist resource from screen region.
     * @summary Remove Playlist resource from screen region.
     * @param {string} id 
     * @param {string} regionId 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public deletePlaylistScreenRegionItem(id: string, regionId: string, playlistId: string, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).deletePlaylistScreenRegionItem(id, regionId, playlistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a campaign from a screen.
     * @summary Delete a campaign from a screen.
     * @param {string} id 
     * @param {string} campaignId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public deleteV1ScreenCampaignId(id: string, campaignId: string, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).deleteV1ScreenCampaignId(id, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a screen groups from a screen.
     * @summary Delete a screen groups from a screen
     * @param {string} id 
     * @param {string} screenGroupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public deleteV1ScreenGroupScreenId(id: string, screenGroupId: string, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).deleteV1ScreenGroupScreenId(id, screenGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Screen resource.
     * @summary Delete a Screen resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public deleteV1ScreenId(id: string, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).deleteV1ScreenId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Screen resource.
     * @summary Retrieve a Screen resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public getScreensId(id: string, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).getScreensId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a Playlist resources base on screen regions.
     * @summary Retrieves a Playlist resources base on screen region.
     * @param {string} id 
     * @param {string} regionId 
     * @param {number} page 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public getV1PlaylistScreenRegions(id: string, regionId: string, page: number, itemsPerPage?: string, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).getV1PlaylistScreenRegions(id, regionId, page, itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves collection of campaign resources.
     * @summary Retrieves collection of campaign resources.
     * @param {string} id 
     * @param {number} page 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {boolean} [published] If true only published content will be shown
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public getV1ScreenCampaignId(id: string, page: number, itemsPerPage?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).getV1ScreenCampaignId(id, page, itemsPerPage, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve ScreeGroups collection base on screen id.
     * @summary Retrieve ScreeGroups collection base on screen id.
     * @param {string} id 
     * @param {number} page 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public getV1ScreenIdScreenGroups(id: string, page: number, itemsPerPage?: string, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).getV1ScreenIdScreenGroups(id, page, itemsPerPage, orderTitle, orderDescription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of Screen resources.
     * @summary Retrieves a collection of Screen resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [search] Search on both location and title
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public getV1Screens(page?: number, itemsPerPage?: string, search?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).getV1Screens(page, itemsPerPage, search, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bind screen with BindKey
     * @param {string} id The screen id
     * @param {ScreenBindObject} [screenBindObject] Bind the screen with the bind key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public postScreenBindKey(id: string, screenBindObject?: ScreenBindObject, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).postScreenBindKey(id, screenBindObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unbind screen from machine
     * @param {string} id The screen id
     * @param {any} [body] Unbind from machine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public postScreenUnbind(id: string, body?: any, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).postScreenUnbind(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Playlist resource from screen region.
     * @summary Add Playlist resource from screen region.
     * @param {string} id 
     * @param {string} regionId 
     * @param {Array<InlineObject3>} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public putPlaylistScreenRegionItem(id: string, regionId: string, inlineObject3?: Array<InlineObject3>, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).putPlaylistScreenRegionItem(id, regionId, inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the collection of screens on a playlist.
     * @summary Update the collection of screens on a playlist.
     * @param {string} id Resource identifier
     * @param {Array<InlineObject2>} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public putV1ScreenCampaignId(id: string, inlineObject2?: Array<InlineObject2>, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).putV1ScreenCampaignId(id, inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the collection of ScreenGroups on a Screen.
     * @summary Update the collection of ScreenGroups on a Screen.
     * @param {string} id 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public putV1ScreenGroupsScreen(id: string, requestBody?: Array<string>, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).putV1ScreenGroupsScreen(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Screen resource.
     * @summary Update a Screen resource.
     * @param {string} id 
     * @param {ScreenScreenInputJsonld} screenScreenInputJsonld The updated Screen resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreensApi
     */
    public putV1ScreenId(id: string, screenScreenInputJsonld: ScreenScreenInputJsonld, options?: AxiosRequestConfig) {
        return ScreensApiFp(this.configuration).putV1ScreenId(id, screenScreenInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SlidesApi - axios parameter creator
 * @export
 */
export const SlidesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Slide resource.
         * @summary Creates a Slide resource.
         * @param {SlideSlideInputJsonld} slideSlideInputJsonld The new Slide resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Slides: async (slideSlideInputJsonld: SlideSlideInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slideSlideInputJsonld' is not null or undefined
            assertParamExists('createV1Slides', 'slideSlideInputJsonld', slideSlideInputJsonld)
            const localVarPath = `/v1/slides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(slideSlideInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Slide resource.
         * @summary Delete a Slide resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1SlideId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1SlideId', 'id', id)
            const localVarPath = `/v1/slides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Slide resource.
         * @summary Retrieve a Slide resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1SlideId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1SlideId', 'id', id)
            const localVarPath = `/v1/slides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of Slide resources.
         * @summary Retrieves a collection of Slide resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Slides: async (page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/slides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (published !== undefined) {
                localVarQueryParameter['published'] = published;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Slide resource.
         * @summary Update a Slide resource.
         * @param {string} id 
         * @param {SlideSlideInputJsonld} slideSlideInputJsonld The updated Slide resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1SlideId: async (id: string, slideSlideInputJsonld: SlideSlideInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1SlideId', 'id', id)
            // verify required parameter 'slideSlideInputJsonld' is not null or undefined
            assertParamExists('putV1SlideId', 'slideSlideInputJsonld', slideSlideInputJsonld)
            const localVarPath = `/v1/slides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(slideSlideInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SlidesApi - functional programming interface
 * @export
 */
export const SlidesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SlidesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Slide resource.
         * @summary Creates a Slide resource.
         * @param {SlideSlideInputJsonld} slideSlideInputJsonld The new Slide resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV1Slides(slideSlideInputJsonld: SlideSlideInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlideSlideJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createV1Slides(slideSlideInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Slide resource.
         * @summary Delete a Slide resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1SlideId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1SlideId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Slide resource.
         * @summary Retrieve a Slide resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1SlideId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1SlideId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of Slide resources.
         * @summary Retrieves a collection of Slide resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Slides(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Slides(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Slide resource.
         * @summary Update a Slide resource.
         * @param {string} id 
         * @param {SlideSlideInputJsonld} slideSlideInputJsonld The updated Slide resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1SlideId(id: string, slideSlideInputJsonld: SlideSlideInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlideSlideJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1SlideId(id, slideSlideInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SlidesApi - factory interface
 * @export
 */
export const SlidesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SlidesApiFp(configuration)
    return {
        /**
         * Creates a Slide resource.
         * @summary Creates a Slide resource.
         * @param {SlideSlideInputJsonld} slideSlideInputJsonld The new Slide resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Slides(slideSlideInputJsonld: SlideSlideInputJsonld, options?: any): AxiosPromise<SlideSlideJsonld> {
            return localVarFp.createV1Slides(slideSlideInputJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Slide resource.
         * @summary Delete a Slide resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1SlideId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1SlideId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Slide resource.
         * @summary Retrieve a Slide resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1SlideId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1SlideId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of Slide resources.
         * @summary Retrieves a collection of Slide resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {boolean} [published] If true only published content will be shown
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Slides(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1Slides(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Slide resource.
         * @summary Update a Slide resource.
         * @param {string} id 
         * @param {SlideSlideInputJsonld} slideSlideInputJsonld The updated Slide resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1SlideId(id: string, slideSlideInputJsonld: SlideSlideInputJsonld, options?: any): AxiosPromise<SlideSlideJsonld> {
            return localVarFp.putV1SlideId(id, slideSlideInputJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SlidesApi - object-oriented interface
 * @export
 * @class SlidesApi
 * @extends {BaseAPI}
 */
export class SlidesApi extends BaseAPI {
    /**
     * Creates a Slide resource.
     * @summary Creates a Slide resource.
     * @param {SlideSlideInputJsonld} slideSlideInputJsonld The new Slide resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidesApi
     */
    public createV1Slides(slideSlideInputJsonld: SlideSlideInputJsonld, options?: AxiosRequestConfig) {
        return SlidesApiFp(this.configuration).createV1Slides(slideSlideInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Slide resource.
     * @summary Delete a Slide resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidesApi
     */
    public deleteV1SlideId(id: string, options?: AxiosRequestConfig) {
        return SlidesApiFp(this.configuration).deleteV1SlideId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Slide resource.
     * @summary Retrieve a Slide resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidesApi
     */
    public getV1SlideId(id: string, options?: AxiosRequestConfig) {
        return SlidesApiFp(this.configuration).getV1SlideId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of Slide resources.
     * @summary Retrieves a collection of Slide resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {boolean} [published] If true only published content will be shown
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidesApi
     */
    public getV1Slides(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, published?: boolean, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return SlidesApiFp(this.configuration).getV1Slides(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, published, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Slide resource.
     * @summary Update a Slide resource.
     * @param {string} id 
     * @param {SlideSlideInputJsonld} slideSlideInputJsonld The updated Slide resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidesApi
     */
    public putV1SlideId(id: string, slideSlideInputJsonld: SlideSlideInputJsonld, options?: AxiosRequestConfig) {
        return SlidesApiFp(this.configuration).putV1SlideId(id, slideSlideInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export const TemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Template resource.
         * @summary Retrieve a Template resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TemplateId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1TemplateId', 'id', id)
            const localVarPath = `/v1/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of Template resources.
         * @summary Retrieve a collection of Template resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Templates: async (page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplatesApi - functional programming interface
 * @export
 */
export const TemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Template resource.
         * @summary Retrieve a Template resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1TemplateId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1TemplateId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of Template resources.
         * @summary Retrieve a collection of Template resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Templates(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Templates(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplatesApi - factory interface
 * @export
 */
export const TemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplatesApiFp(configuration)
    return {
        /**
         * Retrieves a Template resource.
         * @summary Retrieve a Template resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TemplateId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1TemplateId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of Template resources.
         * @summary Retrieve a collection of Template resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Templates(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1Templates(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
export class TemplatesApi extends BaseAPI {
    /**
     * Retrieves a Template resource.
     * @summary Retrieve a Template resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public getV1TemplateId(id: string, options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).getV1TemplateId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a collection of Template resources.
     * @summary Retrieve a collection of Template resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public getV1Templates(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return TemplatesApiFp(this.configuration).getV1Templates(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantsApi - axios parameter creator
 * @export
 */
export const TenantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a tenant resource.
         * @summary Retrieve a tenant resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TenantId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1TenantId', 'id', id)
            const localVarPath = `/v1/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of tenant resources.
         * @summary Retrieves a collection of tenant resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Tenants: async (page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantsApi - functional programming interface
 * @export
 */
export const TenantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a tenant resource.
         * @summary Retrieve a tenant resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1TenantId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1TenantId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of tenant resources.
         * @summary Retrieves a collection of tenant resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Tenants(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Tenants(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantsApi - factory interface
 * @export
 */
export const TenantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantsApiFp(configuration)
    return {
        /**
         * Retrieves a tenant resource.
         * @summary Retrieve a tenant resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TenantId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1TenantId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of tenant resources.
         * @summary Retrieves a collection of tenant resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Tenants(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.getV1Tenants(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantsApi - object-oriented interface
 * @export
 * @class TenantsApi
 * @extends {BaseAPI}
 */
export class TenantsApi extends BaseAPI {
    /**
     * Retrieves a tenant resource.
     * @summary Retrieve a tenant resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public getV1TenantId(id: string, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).getV1TenantId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of tenant resources.
     * @summary Retrieves a collection of tenant resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public getV1Tenants(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).getV1Tenants(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ThemesApi - axios parameter creator
 * @export
 */
export const ThemesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Theme resource.
         * @summary Creates a Theme resource.
         * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The new Theme resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Themes: async (themeThemeInputJsonld: ThemeThemeInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeThemeInputJsonld' is not null or undefined
            assertParamExists('createV1Themes', 'themeThemeInputJsonld', themeThemeInputJsonld)
            const localVarPath = `/v1/themes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(themeThemeInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Theme resource.
         * @summary Delete a Theme resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ThemeId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1ThemeId', 'id', id)
            const localVarPath = `/v1/themes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Theme resource.
         * @summary Retrieve a Theme resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ThemeId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1ThemeId', 'id', id)
            const localVarPath = `/v1/themes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of Theme resources.
         * @summary Retrieve a collection of Theme resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Themes: async (page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/themes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (createdBy2) {
                localVarQueryParameter['createdBy[]'] = createdBy2;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['modifiedBy'] = modifiedBy;
            }

            if (modifiedBy2) {
                localVarQueryParameter['modifiedBy[]'] = modifiedBy2;
            }

            if (orderTitle !== undefined) {
                localVarQueryParameter['order[title]'] = orderTitle;
            }

            if (orderDescription !== undefined) {
                localVarQueryParameter['order[description]'] = orderDescription;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Theme resource.
         * @summary Update a Theme resource.
         * @param {string} id 
         * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The updated Theme resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ThemeId: async (id: string, themeThemeInputJsonld: ThemeThemeInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1ThemeId', 'id', id)
            // verify required parameter 'themeThemeInputJsonld' is not null or undefined
            assertParamExists('putV1ThemeId', 'themeThemeInputJsonld', themeThemeInputJsonld)
            const localVarPath = `/v1/themes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication tenantHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Tenant-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(themeThemeInputJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThemesApi - functional programming interface
 * @export
 */
export const ThemesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThemesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Theme resource.
         * @summary Creates a Theme resource.
         * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The new Theme resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV1Themes(themeThemeInputJsonld: ThemeThemeInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemeThemeJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createV1Themes(themeThemeInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Theme resource.
         * @summary Delete a Theme resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1ThemeId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1ThemeId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Theme resource.
         * @summary Retrieve a Theme resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1ThemeId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1ThemeId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of Theme resources.
         * @summary Retrieve a collection of Theme resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Themes(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Themes(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Theme resource.
         * @summary Update a Theme resource.
         * @param {string} id 
         * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The updated Theme resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1ThemeId(id: string, themeThemeInputJsonld: ThemeThemeInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemeThemeJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1ThemeId(id, themeThemeInputJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThemesApi - factory interface
 * @export
 */
export const ThemesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThemesApiFp(configuration)
    return {
        /**
         * Creates a Theme resource.
         * @summary Creates a Theme resource.
         * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The new Theme resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV1Themes(themeThemeInputJsonld: ThemeThemeInputJsonld, options?: any): AxiosPromise<ThemeThemeJsonld> {
            return localVarFp.createV1Themes(themeThemeInputJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Theme resource.
         * @summary Delete a Theme resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1ThemeId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1ThemeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Theme resource.
         * @summary Retrieve a Theme resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1ThemeId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getV1ThemeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of Theme resources.
         * @summary Retrieve a collection of Theme resources.
         * @param {number} [page] 
         * @param {string} [itemsPerPage] The number of items per page
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [createdBy] 
         * @param {Array<string>} [createdBy2] 
         * @param {string} [modifiedBy] 
         * @param {Array<string>} [modifiedBy2] 
         * @param {'asc' | 'desc'} [orderTitle] 
         * @param {'asc' | 'desc'} [orderDescription] 
         * @param {'asc' | 'desc'} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Themes(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: any): AxiosPromise<void> {
            return localVarFp.getV1Themes(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Theme resource.
         * @summary Update a Theme resource.
         * @param {string} id 
         * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The updated Theme resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1ThemeId(id: string, themeThemeInputJsonld: ThemeThemeInputJsonld, options?: any): AxiosPromise<ThemeThemeJsonld> {
            return localVarFp.putV1ThemeId(id, themeThemeInputJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThemesApi - object-oriented interface
 * @export
 * @class ThemesApi
 * @extends {BaseAPI}
 */
export class ThemesApi extends BaseAPI {
    /**
     * Creates a Theme resource.
     * @summary Creates a Theme resource.
     * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The new Theme resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemesApi
     */
    public createV1Themes(themeThemeInputJsonld: ThemeThemeInputJsonld, options?: AxiosRequestConfig) {
        return ThemesApiFp(this.configuration).createV1Themes(themeThemeInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Theme resource.
     * @summary Delete a Theme resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemesApi
     */
    public deleteV1ThemeId(id: string, options?: AxiosRequestConfig) {
        return ThemesApiFp(this.configuration).deleteV1ThemeId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Theme resource.
     * @summary Retrieve a Theme resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemesApi
     */
    public getV1ThemeId(id: string, options?: AxiosRequestConfig) {
        return ThemesApiFp(this.configuration).getV1ThemeId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a collection of Theme resources.
     * @summary Retrieve a collection of Theme resources.
     * @param {number} [page] 
     * @param {string} [itemsPerPage] The number of items per page
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [createdBy] 
     * @param {Array<string>} [createdBy2] 
     * @param {string} [modifiedBy] 
     * @param {Array<string>} [modifiedBy2] 
     * @param {'asc' | 'desc'} [orderTitle] 
     * @param {'asc' | 'desc'} [orderDescription] 
     * @param {'asc' | 'desc'} [orderCreatedAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemesApi
     */
    public getV1Themes(page?: number, itemsPerPage?: string, title?: string, description?: string, createdBy?: string, createdBy2?: Array<string>, modifiedBy?: string, modifiedBy2?: Array<string>, orderTitle?: 'asc' | 'desc', orderDescription?: 'asc' | 'desc', orderCreatedAt?: 'asc' | 'desc', options?: AxiosRequestConfig) {
        return ThemesApiFp(this.configuration).getV1Themes(page, itemsPerPage, title, description, createdBy, createdBy2, modifiedBy, modifiedBy2, orderTitle, orderDescription, orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Theme resource.
     * @summary Update a Theme resource.
     * @param {string} id 
     * @param {ThemeThemeInputJsonld} themeThemeInputJsonld The updated Theme resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemesApi
     */
    public putV1ThemeId(id: string, themeThemeInputJsonld: ThemeThemeInputJsonld, options?: AxiosRequestConfig) {
        return ThemesApiFp(this.configuration).putV1ThemeId(id, themeThemeInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


